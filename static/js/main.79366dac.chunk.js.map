{"version":3,"sources":["Home.js","Nav.js","About.js","Recipe.js","RecipeListing.js","BreakingBad.js","BreakingBadCharacter.js","App.js","serviceWorker.js","index.js"],"names":["Home","Nav","className","id","style","color","to","About","Recipe","title","calories","image","link","width","src","class","href","target","rel","RecipeListing","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","console","log","preventDefault","type","value","onChange","aria-describedby","placeholder","map","recipe","key","label","url","BreakingBad","characters","setCharacters","fetchCharacters","allCharacters","chars","char","char_id","name","BreakingBadCharacter","match","character","setCharacter","fetchCharacter","params","charInfo","portrayed","nickname","img","alt","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79366dac.chunk.js","sourcesContent":["import React from 'react';\n\nconst Home = () => {\n  return (\n    <div>\n      <h3>This is a experimental React Learning app</h3>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Nav = () => {\n  const navStyle = {\n    color: 'black'\n  };\n  return (\n    <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n      <div className='collapse navbar-collapse' id='navbarNav'>\n        <Link style={navStyle} to='/'>\n          <h3>Experiments</h3>\n        </Link>\n        <ul className='navbar-nav ml-auto'>\n          <Link to='/recipe-listing'>\n            <li className='nav-item'>\n              <span className='nav-link'>Recipe listings</span>\n            </li>\n          </Link>\n          <Link to='/about'>\n            <li className='nav-item'>\n              <span className='nav-link'>About</span>\n            </li>\n          </Link>\n          <Link to='/breaking-bad'>\n            <span className='nav-link'>BreakingBad</span>\n          </Link>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <div className='About'>\n      <h1>About Page</h1>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\n\nconst Recipe = ({ title, calories, image, link }) => {\n  return (\n    <div className='col-sm-6 mt-1'>\n      <div className='card' width='18rem'>\n        <div className='card-body'>\n          <h3 className='card-title'>{title}</h3>\n          <p className='card-text'>{calories}</p>\n          <img src={image} class='img-thumbnail' />\n          <br />\n          <br />\n          <a\n            href={link}\n            target='_blank'\n            rel='noopener noreferrer'\n            class='btn btn-primary'\n          >\n            Go to Website\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\n\nconst RecipeListing = () => {\n  const APP_ID = '11cbe344';\n  const APP_KEY = '797e46b298abfd26de41839921b778f1';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('paneer');\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    console.log(search);\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n\n  return (\n    <div className='App input-group mt-1'>\n      <form onSubmit={getSearch} className='search-form'>\n        <div className='input-group-append' id='button-addon4'>\n          <input\n            type='text'\n            className='search-bar form-control'\n            value={search}\n            onChange={updateSearch}\n            aria-describedby='button-addon4'\n          />\n          <button\n            className='search-btn btn btn-outline-secondary'\n            placeholder='Search Recipe'\n            type='submit'\n          >\n            Search\n          </button>\n        </div>\n      </form>\n      <div className='row mt-1 mr-1 ml-1'>\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            link={recipe.recipe.url}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RecipeListing;\n","// https://breakingbadapi.com/documentation\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst BreakingBad = () => {\n  const [characters, setCharacters] = useState([]);\n  useEffect(() => {\n    fetchCharacters();\n  }, []);\n\n  const fetchCharacters = async () => {\n    const allCharacters = await fetch(\n      `https://www.breakingbadapi.com/api/characters`\n    );\n    const chars = await allCharacters.json();\n    setCharacters(chars);\n    console.log(chars);\n  };\n\n  return (\n    <div className='BreakingBad'>\n      <h1>Few Characters:</h1>\n      {characters.map(char => (\n        <Link to={`/breaking-bad/${char.char_id}`}>\n          <span key={char.char_id}>{char.name}</span>\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default BreakingBad;\n","// https://breakingbadapi.com/documentation\n\nimport React, { useState, useEffect } from 'react';\nconst BreakingBadCharacter = ({ match }) => {\n  const [character, setCharacter] = useState({});\n  useEffect(() => {\n    fetchCharacter();\n  }, []);\n\n  const fetchCharacter = async () => {\n    const character = await fetch(\n      `https://www.breakingbadapi.com/api/characters/${match.params.id}`\n    );\n    const charInfo = await character.json();\n    setCharacter(charInfo);\n    console.log(charInfo);\n  };\n\n  return (\n    <div className='BreakingBadCharacter'>\n      <h1>\n        {character.name} played by {character.portrayed}\n      </h1>\n      <h3>{character.nickname}</h3>\n      <img src={character.img} alt='' />\n    </div>\n  );\n};\n\nexport default BreakingBadCharacter;\n","import React from 'react';\nimport './App.css';\nimport Home from './Home';\nimport Nav from './Nav';\nimport About from './About';\nimport RecipeListing from './RecipeListing';\nimport BreakingBad from './BreakingBad';\nimport BreakingBadCharacter from './BreakingBadCharacter';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <Router>\n      <div className='App'>\n        <Nav />\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/about' exact component={About} />\n          <Route path='/breaking-bad' exact component={BreakingBad} />\n          <Route\n            path='/breaking-bad/:id'\n            exact\n            component={BreakingBadCharacter}\n          />\n          <Route path='/recipe-listing' exact component={RecipeListing} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated pre cached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}